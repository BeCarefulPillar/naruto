local M = {}

function M.Printtb(t)
    local print_r_cache = {}
    local output = {}
    local function sub_print_r(t, indent)
        if (print_r_cache[tostring(t)]) then
            table.insert(output, (indent.."*"..tostring(t)))
        else
            print_r_cache[tostring(t)] = true
            if (type(t) == "table") then
                for pos,val in pairs(t) do
                    if (type(val) == "table") then
                        table.insert(output, indent.."["..pos.."] => "..tostring(t).." {")
                        sub_print_r(val, indent..string.rep(" ",string.len(pos)+8))
                        table.insert(output, indent..string.rep(" ",string.len(pos)+6).."}")
                    elseif (type(val) == "string") then
                        table.insert(output, (indent.."["..pos..'] => "'..val..'"'))

                    else
                        table.insert(output, (indent.."["..pos.."] => "..tostring(val)))
                    end
                end
            else
                table.insert(output, (indent..tostring(t)))
            end
        end
    end

    if (type(t) == "table") then
        table.insert(output, (tostring(t).." {"))
        sub_print_r(t,"  ")
        table.insert(output, ("}"))
    else
        sub_print_r(t,"  ")
    end
    print(table.concat(output, "\n"))
    return table.concat(output, "\n")
end

function M.playSpineAnim(spineAnim, name, loop)
    if name == spineAnim.AnimationName then
        return
    end
    loop = loop or false
    spineAnim.skeleton:SetToSetupPose()
    spineAnim.state:ClearTracks()
    spineAnim.state:SetAnimation(0, name, loop)
end

function M.flipSpineAnim(spineAnim,flip)
    spineAnim.skeleton.FlipX = flip
end

function M.AddChild(parent, prefab)
    local go = CS.UnityEngine.GameObject.Instantiate(prefab);
    if go and parent then
        local t = go.transform
        t.parent = parent.transform
        t.localPosition = CS.UnityEngine.Vector3.zero
        t.localRotation = CS.UnityEngine.Quaternion.identity
        t.localScale = CS.UnityEngine.Vector3.one
    end
    return go
end

function M.RemoveAllChild(parent)
    local childCount = parent.transform.childCount
    if childCount > 0 then
        for i = childCount, 1, -1 do
            CS.UnityEngine.GameObject.DestroyImmediate(parent.transform:GetChild(i - 1).gameObject)
        end
    end
end

function M.appendFile(fileName,content)
    local f = assert(io.open(fileName,'a'))
    f:write(content)
    f:close()
end

function M.DelayCall(delay, func)
    CS.LuaMgr.Instance:DelayCall(delay, func)
end

return M